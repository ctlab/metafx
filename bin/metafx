#!/usr/bin/env bash
##########################################################################################
##### Master MetaFX script that calls pipelines for Metagenomics Feature eXtraction ######
##########################################################################################

VERSION="0.1.0"

help_message () {
    echo ""
    echo "MetaFX v=$VERSION"
    echo "MetaFX (METAgenomic Feature eXtraction) is a toolkit for feature construction and classification of metagenomic samples"
    echo "Usage: metafx [pipeline]"
    echo ""
    echo "Pipelines:"
    echo "    metafast          Unsupervised feature extraction via MetaFast (https://github.com/ctlab/metafast/)"
    echo "    metaspades        Unsupervised feature extraction via metaSpades (https://cab.spbu.ru/software/meta-spades/)"
    echo ""
    echo "    unique            Supervised feature extraction using group-specific k-mers"
    echo "    chisq             Supervised feature extraction using top significant k-mers by chi-squared test"
    echo "    stats             Supervised feature extraction using statistically significant k-mers"
    echo "    colored           Supervised feature extraction using group-colored de Bruijn graph"
    echo ""
    echo "    pca               PCA visualisation of samples based on extracted features"
    echo "    fit               Machine Learning methods to train classification model based on extracted features"
    echo "    predict           Machine Learning methods to classify new samples based on pre-trained model"
    echo "    fit_predict       Machine Learning methods to train classification model based on extracted features and immediately apply it to classify new samples"
    echo "    cv                Machine Learning methods to train classification model based on extracted features and check accuracy via cross-validation"
    echo "    bandage           Module to train classifier and prepare for visualisation in BandageNG (https://github.com/ctlab/BandageNG)"
    echo "    feature_analysis  Module to analyze selected feature in multiple samples and visualize in BandageNG (https://github.com/ctlab/BandageNG)"
    echo ""
    echo "    calc_features     Module to count values for new samples based on previously extracted features"
    echo "    extract_kmers     Module to extract k-mers from samples (to speed up multiple calculations)"
    echo ""
    echo "    -h | --help       Show this help message and exit"
    echo "    -v | --version    Show MetaFX version and exit"
    echo "";}

timestamp=`date +%s`
LOGFILE="metafx_${timestamp}.log"

# Paths to pipelines and scripts
mfx_path=$(which metafx)
bin_path=${mfx_path%/*}
SOFT=${bin_path}/metafx-scripts
PIPES=${bin_path}/metafx-modules

comment () { ${SOFT}/pretty_print.py "$1" "-"; }

if [ "$1" = metafast ]; then
    echo metafx metafast ${@:2} | tee -a $LOGFILE
    { time ${PIPES}/metafast_pipe.sh ${@:2} 2>&1; echo $? >> $LOGFILE; } | tee -a $LOGFILE
    exit `tail -1 $LOGFILE`
elif [ "$1" = metaspades ]; then
    echo metafx metaspades ${@:2} | tee -a $LOGFILE
    { time ${PIPES}/metaspades_pipe.sh ${@:2} 2>&1; echo $? >> $LOGFILE; } | tee -a $LOGFILE
    exit `tail -1 $LOGFILE`
elif [ "$1" = unique ]; then
    echo metafx unique ${@:2} | tee -a $LOGFILE
    { time ${PIPES}/unique.sh ${@:2} 2>&1; echo $? >> $LOGFILE; } | tee -a $LOGFILE
    exit `tail -1 $LOGFILE`
elif [ "$1" = chisq ]; then
    echo metafx chisq ${@:2} | tee -a $LOGFILE
    { time ${PIPES}/chisq.sh ${@:2} 2>&1; echo $? >> $LOGFILE; } | tee -a $LOGFILE
    exit `tail -1 $LOGFILE`
elif [ "$1" = stats ]; then
    echo metafx stats ${@:2} | tee -a $LOGFILE
    { time ${PIPES}/stats.sh ${@:2} 2>&1; echo $? >> $LOGFILE; } | tee -a $LOGFILE
    exit `tail -1 $LOGFILE`
elif [ "$1" = colored ]; then
    echo metafx colored ${@:2} | tee -a $LOGFILE
    { time ${PIPES}/colored.sh ${@:2} 2>&1; echo $? >> $LOGFILE; } | tee -a $LOGFILE
    exit `tail -1 $LOGFILE`
elif [ "$1" = pca ]; then
    echo metafx pca ${@:2} | tee -a $LOGFILE
    { time ${PIPES}/pca.sh ${@:2} 2>&1; echo $? >> $LOGFILE; } | tee -a $LOGFILE
    exit `tail -1 $LOGFILE`
elif [ "$1" = fit ]; then
    echo metafx fit ${@:2} | tee -a $LOGFILE
    { time ${PIPES}/fit.sh ${@:2} 2>&1; echo $? >> $LOGFILE; } | tee -a $LOGFILE
    exit `tail -1 $LOGFILE`
elif [ "$1" = predict ]; then
    echo metafx predict ${@:2} | tee -a $LOGFILE
    { time ${PIPES}/predict.sh ${@:2} 2>&1; echo $? >> $LOGFILE; } | tee -a $LOGFILE
    exit `tail -1 $LOGFILE`
elif [ "$1" = fit_predict ]; then
    echo metafx fit_predict ${@:2} | tee -a $LOGFILE
    { time ${PIPES}/fit_predict.sh ${@:2} 2>&1; echo $? >> $LOGFILE; } | tee -a $LOGFILE
    exit `tail -1 $LOGFILE`
elif [ "$1" = cv ]; then
    echo metafx cv ${@:2} | tee -a $LOGFILE
    { time ${PIPES}/cv.sh ${@:2} 2>&1; echo $? >> $LOGFILE; } | tee -a $LOGFILE
    exit `tail -1 $LOGFILE`
elif [ "$1" = calc_features ]; then
    echo metafx calc_features ${@:2} | tee -a $LOGFILE
    { time ${PIPES}/calc_features.sh ${@:2} 2>&1; echo $? >> $LOGFILE; } | tee -a $LOGFILE
    exit `tail -1 $LOGFILE`
elif [ "$1" = extract_kmers ]; then
    echo metafx extract_kmers ${@:2} | tee -a $LOGFILE
    { time ${PIPES}/extract_kmers.sh ${@:2} 2>&1; echo $? >> $LOGFILE; } | tee -a $LOGFILE
    exit `tail -1 $LOGFILE`
elif [ "$1" = bandage ]; then
    echo metafx bandage ${@:2} | tee -a $LOGFILE
    { time ${PIPES}/bandage_pipe.sh ${@:2} 2>&1; echo $? >> $LOGFILE; } | tee -a $LOGFILE
    exit `tail -1 $LOGFILE`
elif [ "$1" = feature_analysis ]; then
    echo metafx feature_analysis ${@:2} | tee -a $LOGFILE
    { time ${PIPES}/feature_analysis.sh ${@:2} 2>&1; echo $? >> $LOGFILE; } | tee -a $LOGFILE
    exit `tail -1 $LOGFILE`
elif [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    help_message
    exit 0
elif [ "$1" = "-v" ] || [ "$1" = "--version" ]; then
    echo "MetaFX v=$VERSION"
    exit 0
else
    comment "Please select a proper pipeline of MetaFX."
    help_message
    exit 1
fi
